#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('carpul:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


function embeddedMapFunction(item, index){
  console.log("Print element at "+index+": " + item+"\n");

  //I think this should work because the place_id are a fixed length
  //This basically works except for the first case. For some reason it is slightly longer than the other stringS??
  var origin = item.substring(27, 54);
  var destination = item.slice(89, 116);
  var embeddedMapString = "https://www.google.com/maps/embed/v1/directions?origin=place_id:"+origin+"&destination=place_id:"+destination+"&key=AIzaSyCj9Fanni2mPxM4cp3y1DAL1FqOfhY3M0M";

  var fs = require('fs');
  fs.appendFile("routes\\embeddedMaps.txt", embeddedMapString+"\n", function(err) {
    if (err) {
        console.log(err);
    }
  });
}

var io = require('socket.io')(server);

io.on('connection', function(socket){
  var readline = require('readline');
  var fs = require('fs');
  socket.on('getMapObject', function(directionsObj){
    console.log(JSON.stringify(directionsObj.origin) + " " + JSON.stringify(directionsObj.destination) + " " + directionsObj.travelMode);

    fs.appendFile("routes\\SavedRoutes.JSON", JSON.stringify(directionsObj)+"\n", function(err) {
      if (err) {
          console.log(err);
      }
    });
    //reads the entire file
    var fileRead = fs.readFileSync('routes\\SavedRoutes.JSON', "utf8");
    var fileLines = JSON.stringify(fileRead).split("\\n");

    //create embedded map object
    //<iframe width="600" height="450" frameborder="0" style="border:0" src="https://www.google.com/maps/embed/v1/directions?origin=place_id:ChIJsbMcSLd9cVMR-wPI46n0rzY&destination=place_id:ChIJP9RS1R1vcVMR0xEsnBKFn5I&key=AIzaSyCj9Fanni2mPxM4cp3y1DAL1FqOfhY3M0M" allowfullscreen></iframe>
    console.log("Parse this Whole File: "+fileRead);
    //Now is split line by line. Need to extract elements for the embedded map
    fileLines.forEach(embeddedMapFunction);

    //console.log("Parse this Split: "+fileLines[0]);
    //https://www.google.com/maps/embed/v1/directions?origin=place_id:ChIJsbMcSLd9cVMR-wPI46n0rzY&destination=place_id:ChIJP9RS1R1vcVMR0xEsnBKFn5I&key=AIzaSyCj9Fanni2mPxM4cp3y1DAL1FqOfhY3M0M

    //This is where you would add the place_id for orgin and destination for the embedded map
    // var embeddedMapString = "https://www.google.com/maps/embed/v1/directions?origin=place_id:" + "" +"&destination=place_id:"+""+"&key=AIzaSyCj9Fanni2mPxM4cp3y1DAL1FqOfhY3M0M";
    console.log("sending: " + fileLines[0]);
    socket.emit('sendEmbeddedMap', fileLines[0]);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
