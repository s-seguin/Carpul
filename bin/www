#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('carpul:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


///We could likely delete this embeddedMapFunction function
function embeddedMapFunction(item, index){
  //Don't process line if empty or fucked
  if (item.length > 2) {

    console.log("Print element at "+index+": " + item);
    //Turn line into object
    var obj = JSON.parse(item);
    console.log("JSON: " + JSON.stringify(obj));

    //I think this should work because the place_id are a fixed length
    //This basically works except for the first case. For some reason it is slightly longer than the other stringS??
    var origin = obj.origin.placeId;
    var destination = obj.destination.placeId;
    console.log("origin: " + origin);
    var embeddedMapString = "https://www.google.com/maps/embed/v1/directions?origin=place_id:"+origin+"&destination=place_id:"+destination+"&key=AIzaSyCj9Fanni2mPxM4cp3y1DAL1FqOfhY3M0M";

    var fs = require('fs');
    fs.appendFile("routes\\embeddedMaps.txt", embeddedMapString+"\n", function(err) {
      if (err) {
          console.log(err);
      }
    });
  }
}

var io = require('socket.io')(server);

io.on('connection', function(socket){
  console.log("New Connection from " + socket.id);
  var readline = require('readline');
  var fs = require('fs');

  socket.on('sendNewMapToServer', function(directionsObj){
    console.log(JSON.stringify(directionsObj.origin) + " " + JSON.stringify(directionsObj.destination) + " " + directionsObj.travelMode);
    var rideObj = new Object();
    rideObj.driver = socket.username; //value got from register
    var postTime = new Date();
    rideObj.expire = new Date(postTime.getTime() + (1*60*60*1000));
    console.log('Ride posted @ ' + postTime.getHours() + ':' + postTime.getMinutes() +'. Will expire @' +rideObj.expire.getHours() + ':' + rideObj.expire.getMinutes());
    rideObj.capacity = 4 ///Setting Defulat capacity value
    rideObj.embeddedMapString = "https://www.google.com/maps/embed/v1/directions?origin=place_id:"+directionsObj.origin.placeId+"&destination=place_id:"+directionsObj.destination.placeId+"&key=AIzaSyCj9Fanni2mPxM4cp3y1DAL1FqOfhY3M0M"
    rideObj.directionsObj = directionsObj; //sending theh whole thing cause why not
    //Send this map right back to the client
    //// TODO: Insert this into the database
    console.log("sending: " + JSON.stringify(rideObj) );
    socket.emit('sendEmbeddedMap', rideObj);
  });
  socket.on('getMapsFromServer', function(){
    console.log("Sending all the maps to the client");
    var mapFile = fs.readFileSync('routes/embeddedMaps.txt', "utf8");
    //Turns each link into an element of an array
    var mapLinks = mapFile.split("\n");
    socket.emit('sendMapsToClient', mapLinks);
  });
  socket.on('register', function(data){
    console.log('Register event: ' + data.id + " is " + data.name);
    socket.username = data.name;
    console.log(socket.username);
  });
  /*---------------
  Ping temp code
  -----------------*/
  socket.on('pingTo', function(name){
    socket.broadcast.emit('pinged', name);
  });
  /*---------------
  Ping temp code End
  -----------------*/
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
