#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('carpul:server');
var http = require('http');


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

var indexRouter = require('../routes/index');
var usersRouter = require('../routes/users');
var loginRouter = require('../routes/login');
var registerRouter = require('../routes/register');
var logoutRouter = require('../routes/logout');


var passport = require('passport');
var pg = require('pg');
var flash = require('connect-flash');
var session = require('express-session');

// pgDbConn = require('./config/database.js');
require('../config/passport')(passport);

//Passport config stuff
app.use(session({
  secret: 'somerandomsecrethash',
  resave: true,
  saveUninitialized: true,
  cookie:{
    expires: false
  }
})); //Set default values
app.use(passport.initialize());
app.use(passport.session()); //Login sessions
app.use(flash()); //For 'Flashing' messages back to client

///ROUTES
app.use('/', indexRouter(passport, server));
app.use('/users', usersRouter(passport));
app.use('/login', loginRouter(passport));
app.use('/register', registerRouter(passport));
app.use('/logout', logoutRouter(passport));

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
